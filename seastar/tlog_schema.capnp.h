// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: tlog_schema.capnp

#ifndef CAPNP_INCLUDED_f4533cbae6e08506_
#define CAPNP_INCLUDED_f4533cbae6e08506_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(98d11ae1c78a24d9);
CAPNP_DECLARE_SCHEMA(8cf178de3c82d431);
CAPNP_DECLARE_SCHEMA(e46ab5b4b619e094);

}  // namespace schemas
}  // namespace capnp


struct TlogResponse {
  TlogResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98d11ae1c78a24d9, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TlogBlock {
  TlogBlock() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8cf178de3c82d431, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TlogAggregation {
  TlogAggregation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e46ab5b4b619e094, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TlogResponse::Reader {
public:
  typedef TlogResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getType() const;

  inline bool hasSequences() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequences() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TlogResponse::Builder {
public:
  typedef TlogResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getType();
  inline void setType( ::uint8_t value);

  inline bool hasSequences();
  inline  ::capnp::List< ::uint64_t>::Builder getSequences();
  inline void setSequences( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequences(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequences(unsigned int size);
  inline void adoptSequences(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequences();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TlogResponse::Pipeline {
public:
  typedef TlogResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TlogBlock::Reader {
public:
  typedef TlogBlock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVolumeId() const;

  inline  ::uint64_t getSequence() const;

  inline  ::uint64_t getLba() const;

  inline  ::uint32_t getSize() const;

  inline  ::uint32_t getCrc32() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline  ::uint64_t getTimestamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TlogBlock::Builder {
public:
  typedef TlogBlock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVolumeId();
  inline void setVolumeId( ::uint32_t value);

  inline  ::uint64_t getSequence();
  inline void setSequence( ::uint64_t value);

  inline  ::uint64_t getLba();
  inline void setLba( ::uint64_t value);

  inline  ::uint32_t getSize();
  inline void setSize( ::uint32_t value);

  inline  ::uint32_t getCrc32();
  inline void setCrc32( ::uint32_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TlogBlock::Pipeline {
public:
  typedef TlogBlock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TlogAggregation::Reader {
public:
  typedef TlogAggregation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint64_t getSize() const;

  inline  ::uint64_t getTimestamp() const;

  inline  ::uint32_t getVolumeId() const;

  inline bool hasBlocks() const;
  inline  ::capnp::List< ::TlogBlock>::Reader getBlocks() const;

  inline bool hasPrev() const;
  inline  ::capnp::Data::Reader getPrev() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TlogAggregation::Builder {
public:
  typedef TlogAggregation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline  ::uint32_t getVolumeId();
  inline void setVolumeId( ::uint32_t value);

  inline bool hasBlocks();
  inline  ::capnp::List< ::TlogBlock>::Builder getBlocks();
  inline void setBlocks( ::capnp::List< ::TlogBlock>::Reader value);
  inline  ::capnp::List< ::TlogBlock>::Builder initBlocks(unsigned int size);
  inline void adoptBlocks(::capnp::Orphan< ::capnp::List< ::TlogBlock>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TlogBlock>> disownBlocks();

  inline bool hasPrev();
  inline  ::capnp::Data::Builder getPrev();
  inline void setPrev( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPrev(unsigned int size);
  inline void adoptPrev(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPrev();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TlogAggregation::Pipeline {
public:
  typedef TlogAggregation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint8_t TlogResponse::Reader::getType() const {
  return _reader.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TlogResponse::Builder::getType() {
  return _builder.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TlogResponse::Builder::setType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TlogResponse::Reader::hasSequences() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TlogResponse::Builder::hasSequences() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader TlogResponse::Reader::getSequences() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder TlogResponse::Builder::getSequences() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TlogResponse::Builder::setSequences( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void TlogResponse::Builder::setSequences(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder TlogResponse::Builder::initSequences(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TlogResponse::Builder::adoptSequences(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> TlogResponse::Builder::disownSequences() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t TlogBlock::Reader::getVolumeId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TlogBlock::Builder::getVolumeId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TlogBlock::Builder::setVolumeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TlogBlock::Reader::getSequence() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TlogBlock::Builder::getSequence() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TlogBlock::Builder::setSequence( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TlogBlock::Reader::getLba() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TlogBlock::Builder::getLba() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TlogBlock::Builder::setLba( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TlogBlock::Reader::getSize() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TlogBlock::Builder::getSize() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TlogBlock::Builder::setSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TlogBlock::Reader::getCrc32() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TlogBlock::Builder::getCrc32() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void TlogBlock::Builder::setCrc32( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool TlogBlock::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TlogBlock::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TlogBlock::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TlogBlock::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TlogBlock::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TlogBlock::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TlogBlock::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TlogBlock::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t TlogBlock::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TlogBlock::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void TlogBlock::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool TlogAggregation::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TlogAggregation::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TlogAggregation::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TlogAggregation::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TlogAggregation::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TlogAggregation::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TlogAggregation::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TlogAggregation::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t TlogAggregation::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TlogAggregation::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TlogAggregation::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TlogAggregation::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TlogAggregation::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TlogAggregation::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TlogAggregation::Reader::getVolumeId() const {
  return _reader.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TlogAggregation::Builder::getVolumeId() {
  return _builder.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void TlogAggregation::Builder::setVolumeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool TlogAggregation::Reader::hasBlocks() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TlogAggregation::Builder::hasBlocks() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TlogBlock>::Reader TlogAggregation::Reader::getBlocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TlogBlock>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TlogBlock>::Builder TlogAggregation::Builder::getBlocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TlogBlock>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TlogAggregation::Builder::setBlocks( ::capnp::List< ::TlogBlock>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TlogBlock>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TlogBlock>::Builder TlogAggregation::Builder::initBlocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TlogBlock>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TlogAggregation::Builder::adoptBlocks(
    ::capnp::Orphan< ::capnp::List< ::TlogBlock>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TlogBlock>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TlogBlock>> TlogAggregation::Builder::disownBlocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TlogBlock>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool TlogAggregation::Reader::hasPrev() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool TlogAggregation::Builder::hasPrev() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TlogAggregation::Reader::getPrev() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TlogAggregation::Builder::getPrev() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void TlogAggregation::Builder::setPrev( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TlogAggregation::Builder::initPrev(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void TlogAggregation::Builder::adoptPrev(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TlogAggregation::Builder::disownPrev() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_f4533cbae6e08506_
