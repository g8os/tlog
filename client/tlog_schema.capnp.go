// Code generated by capnpc-go.

package client

// AUTO GENERATED - DO NOT EDIT

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type TlogResponse struct{ capnp.Struct }

// TlogResponse_TypeID is the unique identifier for the type TlogResponse.
const TlogResponse_TypeID = 0x98d11ae1c78a24d9

func NewTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func NewRootTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func ReadRootTlogResponse(msg *capnp.Message) (TlogResponse, error) {
	root, err := msg.RootPtr()
	return TlogResponse{root.Struct()}, err
}

func (s TlogResponse) String() string {
	str, _ := text.Marshal(0x98d11ae1c78a24d9, s.Struct)
	return str
}

func (s TlogResponse) Status() int8 {
	return int8(s.Struct.Uint8(0))
}

func (s TlogResponse) SetStatus(v int8) {
	s.Struct.SetUint8(0, uint8(v))
}

func (s TlogResponse) Sequences() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s TlogResponse) HasSequences() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogResponse) SetSequences(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSequences sets the sequences field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s TlogResponse) NewSequences(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TlogResponse_List is a list of TlogResponse.
type TlogResponse_List struct{ capnp.List }

// NewTlogResponse creates a new list of TlogResponse.
func NewTlogResponse_List(s *capnp.Segment, sz int32) (TlogResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TlogResponse_List{l}, err
}

func (s TlogResponse_List) At(i int) TlogResponse { return TlogResponse{s.List.Struct(i)} }

func (s TlogResponse_List) Set(i int, v TlogResponse) error { return s.List.SetStruct(i, v.Struct) }

// TlogResponse_Promise is a wrapper for a TlogResponse promised by a client call.
type TlogResponse_Promise struct{ *capnp.Pipeline }

func (p TlogResponse_Promise) Struct() (TlogResponse, error) {
	s, err := p.Pipeline.Struct()
	return TlogResponse{s}, err
}

type TlogBlock struct{ capnp.Struct }

// TlogBlock_TypeID is the unique identifier for the type TlogBlock.
const TlogBlock_TypeID = 0x8cf178de3c82d431

func NewTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return TlogBlock{st}, err
}

func NewRootTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return TlogBlock{st}, err
}

func ReadRootTlogBlock(msg *capnp.Message) (TlogBlock, error) {
	root, err := msg.RootPtr()
	return TlogBlock{root.Struct()}, err
}

func (s TlogBlock) String() string {
	str, _ := text.Marshal(0x8cf178de3c82d431, s.Struct)
	return str
}

func (s TlogBlock) VolumeId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TlogBlock) HasVolumeId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogBlock) VolumeIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TlogBlock) SetVolumeId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TlogBlock) Sequence() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogBlock) SetSequence(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogBlock) Lba() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogBlock) SetLba(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogBlock) Size() uint32 {
	return s.Struct.Uint32(16)
}

func (s TlogBlock) SetSize(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s TlogBlock) Crc32() uint32 {
	return s.Struct.Uint32(20)
}

func (s TlogBlock) SetCrc32(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s TlogBlock) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TlogBlock) Timestamp() uint64 {
	return s.Struct.Uint64(24)
}

func (s TlogBlock) SetTimestamp(v uint64) {
	s.Struct.SetUint64(24, v)
}

// TlogBlock_List is a list of TlogBlock.
type TlogBlock_List struct{ capnp.List }

// NewTlogBlock creates a new list of TlogBlock.
func NewTlogBlock_List(s *capnp.Segment, sz int32) (TlogBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return TlogBlock_List{l}, err
}

func (s TlogBlock_List) At(i int) TlogBlock { return TlogBlock{s.List.Struct(i)} }

func (s TlogBlock_List) Set(i int, v TlogBlock) error { return s.List.SetStruct(i, v.Struct) }

// TlogBlock_Promise is a wrapper for a TlogBlock promised by a client call.
type TlogBlock_Promise struct{ *capnp.Pipeline }

func (p TlogBlock_Promise) Struct() (TlogBlock, error) {
	s, err := p.Pipeline.Struct()
	return TlogBlock{s}, err
}

type TlogAggregation struct{ capnp.Struct }

// TlogAggregation_TypeID is the unique identifier for the type TlogAggregation.
const TlogAggregation_TypeID = 0xe46ab5b4b619e094

func NewTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return TlogAggregation{st}, err
}

func NewRootTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return TlogAggregation{st}, err
}

func ReadRootTlogAggregation(msg *capnp.Message) (TlogAggregation, error) {
	root, err := msg.RootPtr()
	return TlogAggregation{root.Struct()}, err
}

func (s TlogAggregation) String() string {
	str, _ := text.Marshal(0xe46ab5b4b619e094, s.Struct)
	return str
}

func (s TlogAggregation) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TlogAggregation) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TlogAggregation) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogAggregation) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogAggregation) Timestamp() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogAggregation) SetTimestamp(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogAggregation) VolumeId() uint32 {
	return s.Struct.Uint32(16)
}

func (s TlogAggregation) SetVolumeId(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s TlogAggregation) Blocks() (TlogBlock_List, error) {
	p, err := s.Struct.Ptr(1)
	return TlogBlock_List{List: p.List()}, err
}

func (s TlogAggregation) HasBlocks() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetBlocks(v TlogBlock_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBlocks sets the blocks field to a newly
// allocated TlogBlock_List, preferring placement in s's segment.
func (s TlogAggregation) NewBlocks(n int32) (TlogBlock_List, error) {
	l, err := NewTlogBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return TlogBlock_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s TlogAggregation) Prev() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TlogAggregation) HasPrev() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetPrev(v []byte) error {
	return s.Struct.SetData(2, v)
}

// TlogAggregation_List is a list of TlogAggregation.
type TlogAggregation_List struct{ capnp.List }

// NewTlogAggregation creates a new list of TlogAggregation.
func NewTlogAggregation_List(s *capnp.Segment, sz int32) (TlogAggregation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return TlogAggregation_List{l}, err
}

func (s TlogAggregation_List) At(i int) TlogAggregation { return TlogAggregation{s.List.Struct(i)} }

func (s TlogAggregation_List) Set(i int, v TlogAggregation) error {
	return s.List.SetStruct(i, v.Struct)
}

// TlogAggregation_Promise is a wrapper for a TlogAggregation promised by a client call.
type TlogAggregation_Promise struct{ *capnp.Pipeline }

func (p TlogAggregation_Promise) Struct() (TlogAggregation, error) {
	s, err := p.Pipeline.Struct()
	return TlogAggregation{s}, err
}

const schema_f4533cbae6e08506 = "x\xdat\x93OH\x15_\x1c\xc5\xcf\xf9\xde7\xef)" +
	"\xa8\xef7\xbeY\xfc\x0a#\x08[(\x19\xfe\xd9\x89a" +
	"\xb6\xaaV^\x0dZ\xc68^^\xe6\xbc7/g\xb4" +
	"h\x19\xb4\x89\xa0\x8d\x0b[\x04\x06-\x0a\xdc\x04\x1a\x14" +
	"\x05\x06I\x06\x06\x09\x06\xb5\x09\x8bh\x1f\xb4j3q" +
	"\xd5\xf7\xde\x04\xb5\xbbs8w\xce\xf7{>\xdc\xfeI" +
	"\x9e\x96\x01'\x12@w9\xf9t`\xe7\xe6\xc8\xe7\xeb" +
	"?\xee@w2\x97\xe6o\xed~\x7f>2\xf9\x13\x8e" +
	"\x14\x80\xd2\x11~-\xf5\xb0\x00\x0c\x1d\xe7]\x82\xe9\xa7" +
	"\xee\xdbo\xbe\x1c\xde^\xb2nf\xdc\xd6Sz&\xbf" +
	"J\x1b{\xf7^\xc950]\xdc=\xf4tu\xed\xca" +
	"7kV\x19\xb3\xb2?\x1cP\x9d,\x8d\xed\x1dO\xa9" +
	"\x8bD_\x9a\x84Q\xf9R\x1c\\\x16S\xf1O\x06~" +
	"\xadZ\x1b\xbe\x10F\xe53a!\x0af\xc7I\xdd\xa5" +
	"r@\x8e\x80\xbbv\x1e\xd0\xab\x8az]Hz\xb4\xda" +
	"K\xab\xbdP\xd4\x9bBW\xe8Q\x00w\xe3\x18\xa0\xd7" +
	"\x15\xf5\x96\xd0U9\x8f\x0ap\xdf\xf6\x02\xfa\xb5\xa2~" +
	"/ts\x8e\xc7\x1c\xe0\xbe\x1b\x04\xf4\xa6\xa2\xde\x11\xba" +
	"\x0e=:\x80\xbbm\x9d[\x8a\xfa\xa3\xd0\xcd+\x8fy" +
	"\xc0\xfd0\x01\xe8\x1dE\xbd+L\x17\xa2p\xbeb\xce" +
	"M\x03`\x1b\x84m`\x1a\x9b\xab\xf3\xa6\x1a\x18\xab\xb5" +
	"B\xd8\x0a\x16\xc2)\xbf~.\xc637\x0c[ l" +
	"\x01\x8f\x06s\xc1\xd0`\xfd\xab8\xed'>\xdb!l" +
	"\x07\xd3d\xa6b\xe2\xc4\xaf\x80\xb5\xfa\xdd\x7f\x954a" +
	"F\xe3ZT\x8d\x8d\xed\xa9\xa5\xd1S\xcf0\xa0\xbb\x15" +
	"u\x7f\xb3\xa7>;\xfe\x09E}V8\x1a'~2" +
	"\x1fS \x94\xec\xe4\x8c\xd9\x01\x8e+\xee\x05wd\x82" +
	"\xd5\x9f\xc1c\xe5\xf2\x9c)\xfb\xc9L\xc4\xaa\xcd\xfe\xbf" +
	"\x91}\xcfv\xb7\xa8\xa8\x97\x9b\xd9\xf7\xad\xb6\xa4\xa8\x1f" +
	"f\x18=\xb0\x03-+\xea\x95\x0c\xa3\xc7\x96\xe6#E" +
	"\xbdj\x19q\x9f\xd1\x13\xbb\xce\xca\x01bG\xf6\x19m" +
	"\xf46\x11\x17\xab~\xc5\xd49\xec\xf7\xdc(\xee/e" +
	"f\xe1\x1d\x10\x18\x9d\x0a\xa3`\xb6\xb1\xfd\x7f\xcd\xf7\x01" +
	"Z\xb1X\x9b3\x0buB\xbf\x03\x00\x00\xff\xffI\xe2" +
	"\xb8\x8e"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x8cf178de3c82d431,
		0x98d11ae1c78a24d9,
		0xe46ab5b4b619e094)
}
